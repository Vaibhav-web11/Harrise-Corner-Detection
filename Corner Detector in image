from skimage.io import imread
from skimage.color import rgb2gray
import matplotlib.pyplot as plt

img1 = imread('Clipboard01.jpg')
img= rgb2gray(img1)
# plt.figure(figsize=(15,15))
plt.imshow(img,cmap='gray')


from scipy import signal as sig
import numpy as np

def gradient_x(img):
    ##Sobel operator kernels.
    kernel_x = np.array([[-1, 0, 1],[-2, 0, 2],[-1, 0, 1]])
    return sig.convolve2d(img, kernel_x, mode='same')
def gradient_y(img):
    kernel_y = np.array([[1, 2, 1], [0, 0, 0], [-1, -2, -1]])
    return sig.convolve2d(img, kernel_y, mode='same')

I_x = gradient_x(img)
I_y = gradient_y(img)

from scipy import ndimage  as ndi
Ixx = ndi.gaussian_filter(I_x**2, sigma=1)
Ixy = ndi.gaussian_filter(I_y*I_x, sigma=1)
Iyy = ndi.gaussian_filter(I_y**2, sigma=1)
plt.imshow(Ixx,cmap='gray')

k = 0.05

# determinant
detA = Ixx * Iyy - Ixy ** 2
# trace
traceA = Ixx + Iyy
harris_response = detA - k * traceA ** 2
plt.imshow(harris_response,cmap='gray')

thresold=0.1
img_copy_for_corners = np.copy(img1)
img_copy_for_edges = np.copy(img1)

for rowindex, response in enumerate(harris_response):
    for colindex, r in enumerate(response):
        if r > thresold:
            img_copy_for_corners[rowindex, colindex] = [255,0,0]                  # this is a corner
#         elif r:
#             img_copy_for_edges[rowindex, colindex] = [0,255,255]                 # this is an edge
plt.figure(figsize=(8,8))
plt.imshow(img_copy_for_corners)
